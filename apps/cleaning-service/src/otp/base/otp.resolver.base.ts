/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOtpArgs } from "./CreateOtpArgs";
import { UpdateOtpArgs } from "./UpdateOtpArgs";
import { DeleteOtpArgs } from "./DeleteOtpArgs";
import { OtpCountArgs } from "./OtpCountArgs";
import { OtpFindManyArgs } from "./OtpFindManyArgs";
import { OtpFindUniqueArgs } from "./OtpFindUniqueArgs";
import { Otp } from "./Otp";
import { OtpService } from "../otp.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Otp)
export class OtpResolverBase {
  constructor(
    protected readonly service: OtpService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Otp",
    action: "read",
    possession: "any",
  })
  async _otpsMeta(
    @graphql.Args() args: OtpCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Otp])
  @nestAccessControl.UseRoles({
    resource: "Otp",
    action: "read",
    possession: "any",
  })
  async otps(@graphql.Args() args: OtpFindManyArgs): Promise<Otp[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Otp, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Otp",
    action: "read",
    possession: "own",
  })
  async otp(@graphql.Args() args: OtpFindUniqueArgs): Promise<Otp | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Otp)
  @nestAccessControl.UseRoles({
    resource: "Otp",
    action: "create",
    possession: "any",
  })
  async createOtp(@graphql.Args() args: CreateOtpArgs): Promise<Otp> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Otp)
  @nestAccessControl.UseRoles({
    resource: "Otp",
    action: "update",
    possession: "any",
  })
  async updateOtp(@graphql.Args() args: UpdateOtpArgs): Promise<Otp | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Otp)
  @nestAccessControl.UseRoles({
    resource: "Otp",
    action: "delete",
    possession: "any",
  })
  async deleteOtp(@graphql.Args() args: DeleteOtpArgs): Promise<Otp | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
